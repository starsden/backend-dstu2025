import streamlit as st
import requests
import time
import pandas as pd
import re

apishka = "http://127.0.0.1:8000/api"

st.set_page_config(page_title="DNS —á–µ–∫–∞–ª–∫–∞", page_icon="ü¶¶", layout="centered")
st.title("ü¶¶ –ß–µ-—á–µ-—á–µ")
st.markdown("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–æ–≤ –∏ DNS")

target = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ IP", "google.com")

ct = st.selectbox(
    "–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏",
    ["http", "ping", "tcp", "traceroute", "dns", "full"]
)

port = None
recty = None

if ct == "tcp":
    port = st.number_input("–ü–æ—Ä—Ç", value=80, step=1)

if ct == "dns":
    recty = st.selectbox("–¢–∏–ø DNS-–∑–∞–ø–∏—Å–∏", ["A", "AAAA", "MX", "NS", "TXT"])

if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"):
    with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å..."):
        data = {"target": target, "type": ct}
        if port:
            data["port"] = port
        if recty:
            data["record_type"] = recty

        res = requests.post(f"{apishka}/checks", json=data)

        if res.status_code == 200:
            task = res.json()
            task_id = task["id"]
            st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: `{task_id}`")

            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."):
                for _ in range(60):
                    time.sleep(1)
                    result = requests.get(f"{apishka}/checks/{task_id}").json()


                    if ct == "full":
                        if "results" in result and any(r["status"] not in ("pending", "queued") for r in result["results"]):
                            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                            for r in result["results"]:
                                st.markdown(f"### üîπ {r['type'].upper()} ‚Äî {r['status'].upper()}")
                                st.write(f"‚è± –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {r.get('response_time', '‚Äî')} —Å–µ–∫")

                                # HTTP
                                if r["type"] == "http" and r.get("data"):
                                    headers = r["data"].get("headers", {})
                                    st.subheader("üîé HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏")
                                    st.table(pd.DataFrame(list(headers.items()), columns=["Header", "Value"]))

                                # DNS
                                if r["type"] == "dns" and r.get("data"):
                                    records = r["data"].get("records", [])
                                    st.subheader(f"üåê DNS-–∑–∞–ø–∏—Å–∏ ({r['data'].get('type')})")
                                    st.table(pd.DataFrame(records, columns=["Record"]))

                                # Traceroute
                                if r["type"] == "traceroute" and r.get("data"):
                                    trace_lines = r["data"].get("trace", [])
                                    hops = []
                                    for line in trace_lines:
                                        m = re.findall(
                                            r"(\d+)\s+([\w\.\-]+)\s+\(([\d\.]+)\).*?(\d+\.\d+)\s+ms", line
                                        )
                                        if m:
                                            hop_num, host, ip, delay = m[0]
                                            hops.append({
                                                "Hop": int(hop_num),
                                                "Host": host,
                                                "IP": ip,
                                                "Delay (ms)": float(delay)
                                            })
                                    if hops:
                                        df = pd.DataFrame(hops)
                                        st.subheader("üß≠ –ú–∞—Ä—à—Ä—É—Ç –¥–æ —Ö–æ—Å—Ç–∞")
                                        st.dataframe(df)
                                        st.line_chart(df.set_index("Hop")["Delay (ms)"])
                            break
                    else:
                        if result.get("status") not in ("pending", "queued"):
                            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                            st.json(result)

                            status = result.get("status")
                            rt = result.get("response_time")
                            st.write(f"**–°—Ç–∞—Ç—É—Å:** {status}")
                            if rt:
                                st.metric("‚è± –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (—Å–µ–∫)", round(rt, 3))

                            if ct == "http" and result.get("data"):
                                st.subheader("üîé HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏")
                                headers = result["data"].get("headers", {})
                                st.table(pd.DataFrame(list(headers.items()), columns=["Header", "Value"]))

                            if ct == "traceroute" and result.get("data"):
                                trace_lines = result["data"].get("trace", [])
                                hops = []
                                for line in trace_lines:
                                    m = re.findall(
                                        r"(\d+)\s+([\w\.\-]+)\s+\(([\d\.]+)\).*?(\d+\.\d+)\s+ms", line
                                    )
                                    if m:
                                        hop_num, host, ip, delay = m[0]
                                        hops.append({
                                            "Hop": int(hop_num),
                                            "Host": host,
                                            "IP": ip,
                                            "Delay (ms)": float(delay)
                                        })
                                if hops:
                                    df = pd.DataFrame(hops)
                                    st.subheader("üß≠ –ú–∞—Ä—à—Ä—É—Ç –¥–æ —Ö–æ—Å—Ç–∞")
                                    st.dataframe(df)
                                    st.line_chart(df.set_index("Hop")["Delay (ms)"])

                            # DNS
                            if ct == "dns" and result.get("data"):
                                records = result["data"].get("records", [])
                                st.subheader(f"üåê DNS-–∑–∞–ø–∏—Å–∏ ({result['data'].get('type')})")
                                st.table(pd.DataFrame(records, columns=["Record"]))

                            break
                else:
                    st.warning("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {res.text}")
